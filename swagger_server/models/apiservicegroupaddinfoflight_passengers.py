# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiservicegroupaddinfoflightPassengers(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, firstname: str=None, lastname: str=None, type: str=None, title: str=None, gender: str=None):  # noqa: E501
        """ApiservicegroupaddinfoflightPassengers - a model defined in Swagger

        :param firstname: The firstname of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :type lastname: str
        :param type: The type of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :type type: str
        :param title: The title of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :type title: str
        :param gender: The gender of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :type gender: str
        """
        self.swagger_types = {
            'firstname': str,
            'lastname': str,
            'type': str,
            'title': str,
            'gender': str
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'type': 'type',
            'title': 'title',
            'gender': 'gender'
        }
        self._firstname = firstname
        self._lastname = lastname
        self._type = type
        self._title = title
        self._gender = gender

    @classmethod
    def from_dict(cls, dikt) -> 'ApiservicegroupaddinfoflightPassengers':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiservicegroupaddinfoflight_passengers of this ApiservicegroupaddinfoflightPassengers.  # noqa: E501
        :rtype: ApiservicegroupaddinfoflightPassengers
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self) -> str:
        """Gets the firstname of this ApiservicegroupaddinfoflightPassengers.


        :return: The firstname of this ApiservicegroupaddinfoflightPassengers.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this ApiservicegroupaddinfoflightPassengers.


        :param firstname: The firstname of this ApiservicegroupaddinfoflightPassengers.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this ApiservicegroupaddinfoflightPassengers.


        :return: The lastname of this ApiservicegroupaddinfoflightPassengers.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this ApiservicegroupaddinfoflightPassengers.


        :param lastname: The lastname of this ApiservicegroupaddinfoflightPassengers.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def type(self) -> str:
        """Gets the type of this ApiservicegroupaddinfoflightPassengers.


        :return: The type of this ApiservicegroupaddinfoflightPassengers.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ApiservicegroupaddinfoflightPassengers.


        :param type: The type of this ApiservicegroupaddinfoflightPassengers.
        :type type: str
        """
        allowed_values = ["ADULT", "CHILD", "INFANT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self) -> str:
        """Gets the title of this ApiservicegroupaddinfoflightPassengers.


        :return: The title of this ApiservicegroupaddinfoflightPassengers.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ApiservicegroupaddinfoflightPassengers.


        :param title: The title of this ApiservicegroupaddinfoflightPassengers.
        :type title: str
        """
        allowed_values = ["Mr", "MS", "MRS"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"
                .format(title, allowed_values)
            )

        self._title = title

    @property
    def gender(self) -> str:
        """Gets the gender of this ApiservicegroupaddinfoflightPassengers.


        :return: The gender of this ApiservicegroupaddinfoflightPassengers.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this ApiservicegroupaddinfoflightPassengers.


        :param gender: The gender of this ApiservicegroupaddinfoflightPassengers.
        :type gender: str
        """
        allowed_values = ["M", "F"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender
