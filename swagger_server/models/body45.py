# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.apiservicegroupaddinfoflight_passengers import ApiservicegroupaddinfoflightPassengers  # noqa: F401,E501
from swagger_server import util


class Body45(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, token: str=None, contact_name: str=None, contact_phone: str=None, booking_id: str=None, passengers: List[ApiservicegroupaddinfoflightPassengers]=None):  # noqa: E501
        """Body45 - a model defined in Swagger

        :param token: The token of this Body45.  # noqa: E501
        :type token: str
        :param contact_name: The contact_name of this Body45.  # noqa: E501
        :type contact_name: str
        :param contact_phone: The contact_phone of this Body45.  # noqa: E501
        :type contact_phone: str
        :param booking_id: The booking_id of this Body45.  # noqa: E501
        :type booking_id: str
        :param passengers: The passengers of this Body45.  # noqa: E501
        :type passengers: List[ApiservicegroupaddinfoflightPassengers]
        """
        self.swagger_types = {
            'token': str,
            'contact_name': str,
            'contact_phone': str,
            'booking_id': str,
            'passengers': List[ApiservicegroupaddinfoflightPassengers]
        }

        self.attribute_map = {
            'token': 'token',
            'contact_name': 'contact_name',
            'contact_phone': 'contact_phone',
            'booking_id': 'booking_id',
            'passengers': 'passengers'
        }
        self._token = token
        self._contact_name = contact_name
        self._contact_phone = contact_phone
        self._booking_id = booking_id
        self._passengers = passengers

    @classmethod
    def from_dict(cls, dikt) -> 'Body45':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_45 of this Body45.  # noqa: E501
        :rtype: Body45
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self) -> str:
        """Gets the token of this Body45.


        :return: The token of this Body45.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this Body45.


        :param token: The token of this Body45.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def contact_name(self) -> str:
        """Gets the contact_name of this Body45.


        :return: The contact_name of this Body45.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name: str):
        """Sets the contact_name of this Body45.


        :param contact_name: The contact_name of this Body45.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def contact_phone(self) -> str:
        """Gets the contact_phone of this Body45.


        :return: The contact_phone of this Body45.
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone: str):
        """Sets the contact_phone of this Body45.


        :param contact_phone: The contact_phone of this Body45.
        :type contact_phone: str
        """

        self._contact_phone = contact_phone

    @property
    def booking_id(self) -> str:
        """Gets the booking_id of this Body45.


        :return: The booking_id of this Body45.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id: str):
        """Sets the booking_id of this Body45.


        :param booking_id: The booking_id of this Body45.
        :type booking_id: str
        """

        self._booking_id = booking_id

    @property
    def passengers(self) -> List[ApiservicegroupaddinfoflightPassengers]:
        """Gets the passengers of this Body45.


        :return: The passengers of this Body45.
        :rtype: List[ApiservicegroupaddinfoflightPassengers]
        """
        return self._passengers

    @passengers.setter
    def passengers(self, passengers: List[ApiservicegroupaddinfoflightPassengers]):
        """Sets the passengers of this Body45.


        :param passengers: The passengers of this Body45.
        :type passengers: List[ApiservicegroupaddinfoflightPassengers]
        """

        self._passengers = passengers
